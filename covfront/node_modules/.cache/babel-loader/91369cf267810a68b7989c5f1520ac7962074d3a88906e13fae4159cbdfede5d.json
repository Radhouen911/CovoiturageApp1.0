{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8000/api\";\nconst AUTH_BASE_URL = \"http://localhost:8000\";\nclass ApiService {\n  constructor() {\n    this.user = JSON.parse(localStorage.getItem(\"user\")) || null;\n  }\n  async request(endpoint, options = {}) {\n    const isAuthRoute = [\"/login\", \"/logout\", \"/sanctum/csrf-cookie\"].includes(endpoint);\n    const baseUrl = isAuthRoute ? AUTH_BASE_URL : API_BASE_URL;\n    const url = `${baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...options.headers\n      },\n      credentials: \"include\",\n      // Needed for Sanctum to send cookies\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || \"Une erreur s’est produite.\");\n      }\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Step 1: Get CSRF cookie\n  async getCsrfCookie() {\n    await this.request(\"/sanctum/csrf-cookie\", {\n      method: \"GET\"\n    });\n  }\n\n  // Step 2: Login\n  async login(credentials) {\n    // In your login method, replace the JSON parsing with this debugging:\n    const response = await fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRF-TOKEN\": csrfToken\n      },\n      credentials: \"include\",\n      body: JSON.stringify(credentials)\n    });\n    console.log(\"Response status:\", response.status);\n    console.log(\"Response headers:\", response.headers);\n    const responseText = await response.text();\n    console.log(\"Raw response:\", responseText);\n\n    // Only try to parse if we got a successful response\n    if (response.ok) {\n      try {\n        const data = JSON.parse(responseText);\n        return data;\n      } catch (error) {\n        console.error(\"JSON parse error. Response was:\", responseText);\n        throw error;\n      }\n    } else {\n      console.error(\"HTTP error:\", response.status, responseText);\n      throw new Error(`HTTP ${response.status}: ${responseText}`);\n    }\n\n    /*\n    const response = await this.request(\"/login\", {\n      method: \"POST\",\n      body: JSON.stringify(credentials),\n    });\n     localStorage.setItem(\"user\", JSON.stringify(response.user));\n    this.user = response.user;\n     return response;*/\n  }\n\n  // Logout\n  async logout() {\n    await this.request(\"/logout\", {\n      method: \"POST\"\n    });\n    localStorage.removeItem(\"user\");\n    this.user = null;\n  }\n\n  // Example: Authenticated API GET\n  async getMyRides() {\n    return await this.request(\"/my-rides\", {\n      method: \"GET\"\n    });\n  }\n\n  // Example: Booking a ride\n  async bookRide(bookingData) {\n    return await this.request(\"/bookings\", {\n      method: \"POST\",\n      body: JSON.stringify(bookingData)\n    });\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","AUTH_BASE_URL","ApiService","constructor","user","JSON","parse","localStorage","getItem","request","endpoint","options","isAuthRoute","includes","baseUrl","url","config","headers","Accept","credentials","response","fetch","data","json","ok","Error","message","error","getCsrfCookie","method","login","csrfToken","body","stringify","console","log","status","responseText","text","logout","removeItem","getMyRides","bookRide","bookingData"],"sources":["D:/CovoiturageWeb/covfront/src/services/api.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8000/api\";\nconst AUTH_BASE_URL = \"http://localhost:8000\";\n\nclass ApiService {\n  constructor() {\n    this.user = JSON.parse(localStorage.getItem(\"user\")) || null;\n  }\n\n  async request(endpoint, options = {}) {\n    const isAuthRoute = [\"/login\", \"/logout\", \"/sanctum/csrf-cookie\"].includes(\n      endpoint\n    );\n    const baseUrl = isAuthRoute ? AUTH_BASE_URL : API_BASE_URL;\n\n    const url = `${baseUrl}${endpoint}`;\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...options.headers,\n      },\n      credentials: \"include\", // Needed for Sanctum to send cookies\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || \"Une erreur s’est produite.\");\n      }\n\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Step 1: Get CSRF cookie\n  async getCsrfCookie() {\n    await this.request(\"/sanctum/csrf-cookie\", { method: \"GET\" });\n  }\n\n  // Step 2: Login\n  async login(credentials) {\n    // In your login method, replace the JSON parsing with this debugging:\n    const response = await fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRF-TOKEN\": csrfToken,\n      },\n      credentials: \"include\",\n      body: JSON.stringify(credentials),\n    });\n\n    console.log(\"Response status:\", response.status);\n    console.log(\"Response headers:\", response.headers);\n\n    const responseText = await response.text();\n    console.log(\"Raw response:\", responseText);\n\n    // Only try to parse if we got a successful response\n    if (response.ok) {\n      try {\n        const data = JSON.parse(responseText);\n        return data;\n      } catch (error) {\n        console.error(\"JSON parse error. Response was:\", responseText);\n        throw error;\n      }\n    } else {\n      console.error(\"HTTP error:\", response.status, responseText);\n      throw new Error(`HTTP ${response.status}: ${responseText}`);\n    }\n\n    /*\n    const response = await this.request(\"/login\", {\n      method: \"POST\",\n      body: JSON.stringify(credentials),\n    });\n\n    localStorage.setItem(\"user\", JSON.stringify(response.user));\n    this.user = response.user;\n\n    return response;*/\n  }\n\n  // Logout\n  async logout() {\n    await this.request(\"/logout\", { method: \"POST\" });\n    localStorage.removeItem(\"user\");\n    this.user = null;\n  }\n\n  // Example: Authenticated API GET\n  async getMyRides() {\n    return await this.request(\"/my-rides\", {\n      method: \"GET\",\n    });\n  }\n\n  // Example: Booking a ride\n  async bookRide(bookingData) {\n    return await this.request(\"/bookings\", {\n      method: \"POST\",\n      body: JSON.stringify(bookingData),\n    });\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}