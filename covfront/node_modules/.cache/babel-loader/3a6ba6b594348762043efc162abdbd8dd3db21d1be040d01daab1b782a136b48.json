{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8000\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  }\n});\n\n// Manually read cookies\nfunction getCookie(name) {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return decodeURIComponent(parts.pop().split(\";\").shift());\n  return null;\n}\n\n// Inject CSRF token manually\napi.interceptors.request.use(config => {\n  const xsrfToken = getCookie(\"XSRF-TOKEN\");\n  if (xsrfToken) {\n    config.headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n  }\n  return config;\n});\nclass ApiService {\n  async getCsrfCookie() {\n    return api.get(\"/sanctum/csrf-cookie\");\n  }\n  async login(credentials) {\n    return api.post(\"/login\", credentials);\n  }\n  async logout() {\n    return api.post(\"/logout\");\n  }\n  async getMyRides() {\n    return api.get(\"/api/my-rides\");\n  }\n  async bookRide(data) {\n    return api.post(\"/api/bookings\", data);\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","headers","Accept","getCookie","name","value","document","cookie","parts","split","length","decodeURIComponent","pop","shift","interceptors","request","use","config","xsrfToken","ApiService","getCsrfCookie","get","login","credentials","post","logout","getMyRides","bookRide","data"],"sources":["D:/CovoiturageWeb/covfront/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:8000\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n});\n\n// Manually read cookies\nfunction getCookie(name) {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2)\n    return decodeURIComponent(parts.pop().split(\";\").shift());\n  return null;\n}\n\n// Inject CSRF token manually\napi.interceptors.request.use((config) => {\n  const xsrfToken = getCookie(\"XSRF-TOKEN\");\n  if (xsrfToken) {\n    config.headers[\"X-XSRF-TOKEN\"] = xsrfToken;\n  }\n  return config;\n});\n\nclass ApiService {\n  async getCsrfCookie() {\n    return api.get(\"/sanctum/csrf-cookie\");\n  }\n\n  async login(credentials) {\n    return api.post(\"/login\", credentials);\n  }\n\n  async logout() {\n    return api.post(\"/logout\");\n  }\n\n  async getMyRides() {\n    return api.get(\"/api/my-rides\");\n  }\n\n  async bookRide(data) {\n    return api.post(\"/api/bookings\", data);\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;;AAEF;AACA,SAASC,SAASA,CAACC,IAAI,EAAE;EACvB,MAAMC,KAAK,GAAG,KAAKC,QAAQ,CAACC,MAAM,EAAE;EACpC,MAAMC,KAAK,GAAGH,KAAK,CAACI,KAAK,CAAC,KAAKL,IAAI,GAAG,CAAC;EACvC,IAAII,KAAK,CAACE,MAAM,KAAK,CAAC,EACpB,OAAOC,kBAAkB,CAACH,KAAK,CAACI,GAAG,CAAC,CAAC,CAACH,KAAK,CAAC,GAAG,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC;EAC3D,OAAO,IAAI;AACb;;AAEA;AACAhB,GAAG,CAACiB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,SAAS,GAAGf,SAAS,CAAC,YAAY,CAAC;EACzC,IAAIe,SAAS,EAAE;IACbD,MAAM,CAAChB,OAAO,CAAC,cAAc,CAAC,GAAGiB,SAAS;EAC5C;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,MAAME,UAAU,CAAC;EACf,MAAMC,aAAaA,CAAA,EAAG;IACpB,OAAOvB,GAAG,CAACwB,GAAG,CAAC,sBAAsB,CAAC;EACxC;EAEA,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,OAAO1B,GAAG,CAAC2B,IAAI,CAAC,QAAQ,EAAED,WAAW,CAAC;EACxC;EAEA,MAAME,MAAMA,CAAA,EAAG;IACb,OAAO5B,GAAG,CAAC2B,IAAI,CAAC,SAAS,CAAC;EAC5B;EAEA,MAAME,UAAUA,CAAA,EAAG;IACjB,OAAO7B,GAAG,CAACwB,GAAG,CAAC,eAAe,CAAC;EACjC;EAEA,MAAMM,QAAQA,CAACC,IAAI,EAAE;IACnB,OAAO/B,GAAG,CAAC2B,IAAI,CAAC,eAAe,EAAEI,IAAI,CAAC;EACxC;AACF;AAEA,eAAe,IAAIT,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}