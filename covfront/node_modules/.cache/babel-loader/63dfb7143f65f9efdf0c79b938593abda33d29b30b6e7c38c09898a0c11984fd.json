{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8000\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  },\n  withCredentials: true\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n  }\n  return Promise.reject(error);\n});\nclass ApiService {\n  async login(credentials) {\n    const response = await api.post(\"/api/login\", credentials);\n    if (response.data.success && response.data.data.token) {\n      const {\n        token,\n        user\n      } = response.data.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return response.data;\n  }\n  async logout() {\n    try {\n      await api.post(\"/api/logout\");\n    } finally {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      delete api.defaults.headers.common[\"Authorization\"];\n    }\n  }\n  async getCurrentUser() {\n    const response = await api.get(\"/api/user\");\n    return response.data;\n  }\n  async getRideDetails(rideId) {\n    const response = await api.get(`/api/rides/${rideId}`);\n    return response.data;\n  }\n  async bookRide(rideId, bookingData) {\n    const response = await api.post(\"/api/bookings\", {\n      ride_id: rideId,\n      ...bookingData\n    });\n    return response.data;\n  }\n  async getMyBookings() {\n    const response = await api.get(\"/api/bookings\");\n    return response.data;\n  }\n  async getBookingRequests() {\n    const response = await api.get(\"/api/booking-requests\");\n    return response.data;\n  }\n  async acceptBooking(bookingId) {\n    const response = await api.put(`/api/bookings/${bookingId}/accept`);\n    return response.data;\n  }\n  async rejectBooking(bookingId) {\n    const response = await api.put(`/api/bookings/${bookingId}/reject`);\n    return response.data;\n  }\n  async cancelBooking(bookingId) {\n    const response = await api.put(`/api/bookings/${bookingId}/cancel`);\n    return response.data;\n  }\n  async createConversation(otherUserId, rideId = null) {\n    const response = await api.post(\"/api/conversations\", {\n      other_user_id: otherUserId,\n      ride_id: rideId\n    });\n    return response.data;\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem(\"token\");\n  }\n  getCurrentUserFromStorage() {\n    const userStr = localStorage.getItem(\"user\");\n    return userStr ? JSON.parse(userStr) : null;\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","api","create","baseURL","headers","Accept","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","ApiService","login","credentials","post","data","success","user","setItem","JSON","stringify","defaults","common","logout","getCurrentUser","get","getRideDetails","rideId","bookRide","bookingData","ride_id","getMyBookings","getBookingRequests","acceptBooking","bookingId","put","rejectBooking","cancelBooking","createConversation","otherUserId","other_user_id","isAuthenticated","getCurrentUserFromStorage","userStr","parse"],"sources":["D:/CovoiturageWeb/covfront/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:8000\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n  withCredentials: true,\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n    }\n    return Promise.reject(error);\n  }\n);\n\nclass ApiService {\n  async login(credentials) {\n    const response = await api.post(\"/api/login\", credentials);\n    if (response.data.success && response.data.data.token) {\n      const { token, user } = response.data.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return response.data;\n  }\n\n  async logout() {\n    try {\n      await api.post(\"/api/logout\");\n    } finally {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      delete api.defaults.headers.common[\"Authorization\"];\n    }\n  }\n\n  async getCurrentUser() {\n    const response = await api.get(\"/api/user\");\n    return response.data;\n  }\n\n  async getRideDetails(rideId) {\n    const response = await api.get(`/api/rides/${rideId}`);\n    return response.data;\n  }\n\n  async bookRide(rideId, bookingData) {\n    const response = await api.post(\"/api/bookings\", {\n      ride_id: rideId,\n      ...bookingData,\n    });\n    return response.data;\n  }\n\n  async getMyBookings() {\n    const response = await api.get(\"/api/bookings\");\n    return response.data;\n  }\n\n  async getBookingRequests() {\n    const response = await api.get(\"/api/booking-requests\");\n    return response.data;\n  }\n\n  async acceptBooking(bookingId) {\n    const response = await api.put(`/api/bookings/${bookingId}/accept`);\n    return response.data;\n  }\n\n  async rejectBooking(bookingId) {\n    const response = await api.put(`/api/bookings/${bookingId}/reject`);\n    return response.data;\n  }\n\n  async cancelBooking(bookingId) {\n    const response = await api.put(`/api/bookings/${bookingId}/cancel`);\n    return response.data;\n  }\n\n  async createConversation(otherUserId, rideId = null) {\n    const response = await api.post(\"/api/conversations\", {\n      other_user_id: otherUserId,\n      ride_id: rideId,\n    });\n    return response.data;\n  }\n\n  isAuthenticated() {\n    return !!localStorage.getItem(\"token\");\n  }\n\n  getCurrentUserFromStorage() {\n    const userStr = localStorage.getItem(\"user\");\n    return userStr ? JSON.parse(userStr) : null;\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}