{"ast":null,"code":"var _jsxFileName = \"D:\\\\covoiturageGithub\\\\CovoiturageApp\\\\covfront\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport ApiService from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const token = localStorage.getItem(\"token\");\n      const userData = localStorage.getItem(\"user\");\n      if (token && userData) {\n        try {\n          // Set initial state from storage\n          setIsLoggedIn(true);\n          setUser(JSON.parse(userData));\n\n          // Validate token with server\n          const response = await ApiService.getCurrentUser();\n          if (response.success) {\n            setUser(response.data);\n            localStorage.setItem(\"user\", JSON.stringify(response.data));\n          } else {\n            console.warn(\"Token validation failed:\", response.message);\n            logout();\n          }\n        } catch (error) {\n          console.error(\"Auth check failed:\", error);\n          logout();\n        }\n      } else {\n        setIsLoggedIn(false);\n        setUser(null);\n      }\n      setLoading(false);\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async credentials => {\n    try {\n      const response = await ApiService.login(credentials);\n      if (response.success) {\n        setIsLoggedIn(true);\n        setUser(response.data.user);\n      }\n      return response;\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await ApiService.register(userData);\n      if (response.success) {\n        setIsLoggedIn(true);\n        setUser(response.data.user);\n      }\n      return response;\n    } catch (error) {\n      console.error(\"Register failed:\", error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await ApiService.logout();\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      setIsLoggedIn(false);\n      setUser(null);\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n    }\n  };\n  const value = {\n    isLoggedIn,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"yZDfVBHkRvzBQbg89I5SngvUWfc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","ApiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isLoggedIn","setIsLoggedIn","user","setUser","loading","setLoading","checkAuthStatus","token","localStorage","getItem","userData","JSON","parse","response","getCurrentUser","success","data","setItem","stringify","console","warn","message","logout","error","login","credentials","register","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/covoiturageGithub/CovoiturageApp/covfront/src/contexts/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport ApiService from \"../services/api\";\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const token = localStorage.getItem(\"token\");\n      const userData = localStorage.getItem(\"user\");\n\n      if (token && userData) {\n        try {\n          // Set initial state from storage\n          setIsLoggedIn(true);\n          setUser(JSON.parse(userData));\n\n          // Validate token with server\n          const response = await ApiService.getCurrentUser();\n          if (response.success) {\n            setUser(response.data);\n            localStorage.setItem(\"user\", JSON.stringify(response.data));\n          } else {\n            console.warn(\"Token validation failed:\", response.message);\n            logout();\n          }\n        } catch (error) {\n          console.error(\"Auth check failed:\", error);\n          logout();\n        }\n      } else {\n        setIsLoggedIn(false);\n        setUser(null);\n      }\n      setLoading(false);\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      const response = await ApiService.login(credentials);\n      if (response.success) {\n        setIsLoggedIn(true);\n        setUser(response.data.user);\n      }\n      return response;\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const response = await ApiService.register(userData);\n      if (response.success) {\n        setIsLoggedIn(true);\n        setUser(response.data.user);\n      }\n      return response;\n    } catch (error) {\n      console.error(\"Register failed:\", error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await ApiService.logout();\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      setIsLoggedIn(false);\n      setUser(null);\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n    }\n  };\n\n  const value = {\n    isLoggedIn,\n    user,\n    loading,\n    login,\n    register,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}