{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8000/api\";\nconst AUTH_BASE_URL = \"http://localhost:8000\";\nclass ApiService {\n  constructor() {\n    this.user = JSON.parse(localStorage.getItem(\"user\")) || null;\n  }\n\n  // Get CSRF token from cookies\n  getCsrfToken() {\n    const cookies = document.cookie.split(\";\");\n    for (let cookie of cookies) {\n      const [name, value] = cookie.trim().split(\"=\");\n      if (name === \"XSRF-TOKEN\") {\n        return decodeURIComponent(value);\n      }\n    }\n    return null;\n  }\n  async request(endpoint, options = {}) {\n    const isAuthRoute = [\"/login\", \"/logout\", \"/sanctum/csrf-cookie\"].includes(endpoint);\n    const baseUrl = isAuthRoute ? AUTH_BASE_URL : API_BASE_URL;\n    const url = `${baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...options.headers\n      },\n      credentials: \"include\",\n      // Needed for Sanctum to send cookies\n      ...options\n    };\n\n    // Add CSRF token for non-GET requests\n    if (options.method && options.method !== \"GET\") {\n      const csrfToken = this.getCsrfToken();\n      if (csrfToken) {\n        config.headers[\"X-CSRF-TOKEN\"] = csrfToken;\n      }\n    }\n    try {\n      const response = await fetch(url, config);\n\n      // Debug logging\n      console.log(\"Request URL:\", url);\n      console.log(\"Response status:\", response.status);\n\n      // Check if response is actually JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        const textResponse = await response.text();\n        console.error(\"Non-JSON response:\", textResponse);\n        throw new Error(`Server returned non-JSON response: ${textResponse.substring(0, 100)}...`);\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || \"Une erreur s'est produite.\");\n      }\n      return data;\n    } catch (error) {\n      console.error(\"API Request Error:\", error);\n      throw error;\n    }\n  }\n\n  // Step 1: Get CSRF cookie\n  async getCsrfCookie() {\n    try {\n      await this.request(\"/sanctum/csrf-cookie\", {\n        method: \"GET\"\n      });\n      console.log(\"CSRF cookie obtained\");\n    } catch (error) {\n      console.error(\"Error getting CSRF cookie:\", error);\n      throw error;\n    }\n  }\n\n  // Step 2: Login\n  async login(credentials) {\n    try {\n      // First get CSRF cookie\n      await this.getCsrfCookie();\n\n      // Wait a moment for cookie to be set\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // Check if we have the CSRF token\n      const csrfToken = this.getCsrfToken();\n      console.log(\"CSRF Token before login:\", csrfToken);\n      if (!csrfToken) {\n        throw new Error(\"CSRF token not found. Please refresh the page and try again.\");\n      }\n      const response = await this.request(\"/login\", {\n        method: \"POST\",\n        body: JSON.stringify(credentials)\n      });\n      localStorage.setItem(\"user\", JSON.stringify(response.user));\n      this.user = response.user;\n      return response;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  }\n\n  // Logout\n  async logout() {\n    try {\n      await this.request(\"/logout\", {\n        method: \"POST\"\n      });\n      localStorage.removeItem(\"user\");\n      this.user = null;\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      // Even if logout fails on server, clear local storage\n      localStorage.removeItem(\"user\");\n      this.user = null;\n      throw error;\n    }\n  }\n\n  // Example: Authenticated API GET\n  async getMyRides() {\n    return await this.request(\"/my-rides\", {\n      method: \"GET\"\n    });\n  }\n\n  // Example: Booking a ride\n  async bookRide(bookingData) {\n    return await this.request(\"/bookings\", {\n      method: \"POST\",\n      body: JSON.stringify(bookingData)\n    });\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","AUTH_BASE_URL","ApiService","constructor","user","JSON","parse","localStorage","getItem","getCsrfToken","cookies","document","cookie","split","name","value","trim","decodeURIComponent","request","endpoint","options","isAuthRoute","includes","baseUrl","url","config","headers","Accept","credentials","method","csrfToken","response","fetch","console","log","status","contentType","get","textResponse","text","error","Error","substring","data","json","ok","message","getCsrfCookie","login","Promise","resolve","setTimeout","body","stringify","setItem","logout","removeItem","getMyRides","bookRide","bookingData"],"sources":["D:/CovoiturageWeb/covfront/src/services/api.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8000/api\";\nconst AUTH_BASE_URL = \"http://localhost:8000\";\n\nclass ApiService {\n  constructor() {\n    this.user = JSON.parse(localStorage.getItem(\"user\")) || null;\n  }\n\n  // Get CSRF token from cookies\n  getCsrfToken() {\n    const cookies = document.cookie.split(\";\");\n    for (let cookie of cookies) {\n      const [name, value] = cookie.trim().split(\"=\");\n      if (name === \"XSRF-TOKEN\") {\n        return decodeURIComponent(value);\n      }\n    }\n    return null;\n  }\n\n  async request(endpoint, options = {}) {\n    const isAuthRoute = [\"/login\", \"/logout\", \"/sanctum/csrf-cookie\"].includes(\n      endpoint\n    );\n    const baseUrl = isAuthRoute ? AUTH_BASE_URL : API_BASE_URL;\n\n    const url = `${baseUrl}${endpoint}`;\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...options.headers,\n      },\n      credentials: \"include\", // Needed for Sanctum to send cookies\n      ...options,\n    };\n\n    // Add CSRF token for non-GET requests\n    if (options.method && options.method !== \"GET\") {\n      const csrfToken = this.getCsrfToken();\n      if (csrfToken) {\n        config.headers[\"X-CSRF-TOKEN\"] = csrfToken;\n      }\n    }\n\n    try {\n      const response = await fetch(url, config);\n\n      // Debug logging\n      console.log(\"Request URL:\", url);\n      console.log(\"Response status:\", response.status);\n\n      // Check if response is actually JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        const textResponse = await response.text();\n        console.error(\"Non-JSON response:\", textResponse);\n        throw new Error(\n          `Server returned non-JSON response: ${textResponse.substring(\n            0,\n            100\n          )}...`\n        );\n      }\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || \"Une erreur s'est produite.\");\n      }\n\n      return data;\n    } catch (error) {\n      console.error(\"API Request Error:\", error);\n      throw error;\n    }\n  }\n\n  // Step 1: Get CSRF cookie\n  async getCsrfCookie() {\n    try {\n      await this.request(\"/sanctum/csrf-cookie\", { method: \"GET\" });\n      console.log(\"CSRF cookie obtained\");\n    } catch (error) {\n      console.error(\"Error getting CSRF cookie:\", error);\n      throw error;\n    }\n  }\n\n  // Step 2: Login\n  async login(credentials) {\n    try {\n      // First get CSRF cookie\n      await this.getCsrfCookie();\n\n      // Wait a moment for cookie to be set\n      await new Promise((resolve) => setTimeout(resolve, 100));\n\n      // Check if we have the CSRF token\n      const csrfToken = this.getCsrfToken();\n      console.log(\"CSRF Token before login:\", csrfToken);\n\n      if (!csrfToken) {\n        throw new Error(\n          \"CSRF token not found. Please refresh the page and try again.\"\n        );\n      }\n\n      const response = await this.request(\"/login\", {\n        method: \"POST\",\n        body: JSON.stringify(credentials),\n      });\n\n      localStorage.setItem(\"user\", JSON.stringify(response.user));\n      this.user = response.user;\n\n      return response;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  }\n\n  // Logout\n  async logout() {\n    try {\n      await this.request(\"/logout\", { method: \"POST\" });\n      localStorage.removeItem(\"user\");\n      this.user = null;\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      // Even if logout fails on server, clear local storage\n      localStorage.removeItem(\"user\");\n      this.user = null;\n      throw error;\n    }\n  }\n\n  // Example: Authenticated API GET\n  async getMyRides() {\n    return await this.request(\"/my-rides\", {\n      method: \"GET\",\n    });\n  }\n\n  // Example: Booking a ride\n  async bookRide(bookingData) {\n    return await this.request(\"/bookings\", {\n      method: \"POST\",\n      body: JSON.stringify(bookingData),\n    });\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}